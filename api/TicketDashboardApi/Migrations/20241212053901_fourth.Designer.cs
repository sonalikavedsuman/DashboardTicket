// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketDashboardApi.DataContext;

#nullable disable

namespace TicketDashboardApi.Migrations
{
    [DbContext(typeof(TicketDashboardDbContext))]
    [Migration("20241212053901_fourth")]
    partial class fourth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicketDashboardApi.Models.ClientContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ClientProjectNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DetailName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectInfoId");

                    b.ToTable("ClientContents", (string)null);
                });

            modelBuilder.Entity("TicketDashboardApi.Models.DocumentEditor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClientContentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonalInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectInfoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientContentId");

                    b.HasIndex("PersonalInfoId");

                    b.HasIndex("ProjectInfoId");

                    b.ToTable("DocumentEditors", (string)null);
                });

            modelBuilder.Entity("TicketDashboardApi.Models.PersonalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PersonalInfos", (string)null);
                });

            modelBuilder.Entity("TicketDashboardApi.Models.ProjectInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PersonalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonalInfoId");

                    b.ToTable("ProjectInfos", (string)null);
                });

            modelBuilder.Entity("TicketDashboardApi.Models.ClientContent", b =>
                {
                    b.HasOne("TicketDashboardApi.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("ClientContents")
                        .HasForeignKey("ProjectInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectInfo");
                });

            modelBuilder.Entity("TicketDashboardApi.Models.DocumentEditor", b =>
                {
                    b.HasOne("TicketDashboardApi.Models.ClientContent", "ClientContent")
                        .WithMany()
                        .HasForeignKey("ClientContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketDashboardApi.Models.PersonalInfo", "PersonalInfo")
                        .WithMany()
                        .HasForeignKey("PersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketDashboardApi.Models.ProjectInfo", "ProjectInfo")
                        .WithMany()
                        .HasForeignKey("ProjectInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientContent");

                    b.Navigation("PersonalInfo");

                    b.Navigation("ProjectInfo");
                });

            modelBuilder.Entity("TicketDashboardApi.Models.ProjectInfo", b =>
                {
                    b.HasOne("TicketDashboardApi.Models.PersonalInfo", "PersonalInfo")
                        .WithMany("ProjectInfos")
                        .HasForeignKey("PersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalInfo");
                });

            modelBuilder.Entity("TicketDashboardApi.Models.PersonalInfo", b =>
                {
                    b.Navigation("ProjectInfos");
                });

            modelBuilder.Entity("TicketDashboardApi.Models.ProjectInfo", b =>
                {
                    b.Navigation("ClientContents");
                });
#pragma warning restore 612, 618
        }
    }
}
